{"version":3,"file":"EllipseApiRouter.js","sourceRoot":"","sources":["../../src/EllipseApiRouter.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApiEdgeDefinition, ApiEdgeError, ApiEdgeQueryResponse, Api, ApiRequestType} from \"api-core\";\nimport {ApiQueryStringParser} from \"./ApiQueryStringParser\";\n\nexport class EllipseApiRouter {\n\n    defaultApi: Api;\n    apis: Api[];\n\n    private apiVersions: string[];\n\n    constructor(apis: Api[]) {\n        this.apis = apis;\n        this.defaultApi = apis[0];\n\n        this.apiVersions = apis.map(api => api.version);\n    }\n\n    apply = (app: any) => {\n        let router = this;\n\n        app.all('/v:version/*', function(req: any, res: any, next: any) {\n            let index = router.apiVersions.indexOf(req.params.version);\n            if(index == -1) {\n                this.error = new ApiEdgeError(400, \"Unsupported API version\");\n                next()\n            }\n            else {\n                this.api = router.apis[index];\n                req.apiPath = req.path.replace(`/v${this.api.version}/`, '');\n                next()\n            }\n        });\n\n        app.all('/*', function (req: any, res: any, next: any) {\n            if(!this.api) {\n                this.api = router.defaultApi;\n                req.apiPath = req.path.replace('/', '');\n            }\n\n            next()\n        });\n\n        app.use(function(req: any, res: any, next: any) {\n            if(this.error || !this.api) next();\n            else {\n                try {\n                    let request = this.api.parseRequest(req.apiPath.split('/'));\n\n                    if(!request.path.segments.length) {\n                        this.error = new ApiEdgeError(404, 'Not Found');\n                        return next()\n                    }\n\n                    request.context = ApiQueryStringParser.parse(req.query, request.path);\n\n                    if (req.body) {\n                        request.body = req.body;\n                    }\n\n                    switch(req.method) {\n                        case \"GET\":\n                            request.type = ApiRequestType.Read;\n                            break;\n                        case \"POST\":\n                            request.type = ApiRequestType.Create;\n                            break;\n                        case \"PUT\":\n                            request.type = ApiRequestType.Update;\n                            break;\n                        case \"PATCH\":\n                            request.type = ApiRequestType.Patch;\n                            break;\n                        case \"DELETE\":\n                            request.type = ApiRequestType.Delete;\n                            break;\n                    }\n\n                    let query = this.api.buildQuery(request);\n                    query.request = request;\n\n                    //TODO: req.user - Is this an acceptable solution?\n                    query.execute(req.user)\n                        .then((resp: ApiEdgeQueryResponse) => {\n                            if(resp.metadata) {\n                                if(resp.metadata.pagination) {\n                                    const total = resp.metadata.pagination.total || 0,\n                                        limit = +req.query.limit || ApiQueryStringParser.defaultLimit;\n                                    res.setHeader('X-Total-Count', req.query.page ? Math.ceil(total / limit) : total);\n                                }\n                            }\n\n                            res.json(resp.data)\n                        })\n                        .catch((e: any) => {\n                            this.error = e;\n                            next()\n                        })\n                }\n                catch (e) {\n                    this.error = e;\n                    next()\n                }\n            }\n        });\n\n        app.use(function () {\n            let e = this.error;\n            if(e instanceof ApiEdgeError) {\n                this.status = e.status;\n                this.send(e.message);\n            }\n            else {\n                this.status = 500;\n                this.send(\"Internal Server Error\");\n            }\n        });\n    };\n\n}\n"]}